{"version":3,"sources":["components/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","elevation","variant","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","color","marginBottom","Tab","indicatorColor","textColor","table","maxWidth","overflow","tableContainer","margin","TabPanel","Form","classes","useState","Row","SetRow","value","setValue","text","Settext","email","Setemail","name","Setname","number","Setnumber","category","SetCategory","React","open","setOpen","handleClose","event","reason","useEffect","localStorage","setItem","JSON","stringify","AppBar","position","className","Tabs","onChange","newValue","console","log","index","label","onClick","e","data","getItem","Rowdata","parse","autoComplete","onSubmit","preventDefault","obj","arr","push","Grid","container","spacing","item","md","formField","Typography","TextField","fullWidth","required","size","target","field","country","formattedValue","str","dialCode","containerStyle","border","borderRadius","inputStyle","background","width","dropdownClass","buttonStyle","RadioGroup","row","FormControlLabel","control","Radio","Button","type","Snackbar","autoHideDuration","onClose","severity","style","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","createTheme","palette","primary","main","secondary","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6aAsCA,SAASA,EAAMC,GACb,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAUtD,IAAMG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,gBAAiB,UACjBC,MAAM,QACNC,aAAa,GAKfC,IAAI,CACFC,eAAe,CACbJ,gBAAgB,WAElBK,UAAU,CACRL,gBAAgB,YAGpBM,MAAO,CACLC,SAAU,IACVC,SAAU,UAEZC,eAAe,CACbF,SAAU,IACVG,OAAO,QAIX,SAASC,IAEP,OACF,wBAMe,SAASC,IACtB,IAAMC,EAAUlB,IACjB,EAAmBmB,mBAAS,IAA5B,mBAAOC,EAAP,KAAWC,EAAX,KACC,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAqBJ,mBAAS,MAA9B,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAAuBN,mBAAS,MAAhC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAAqBR,mBAAS,MAA9B,mBAAOS,EAAP,KAAYC,EAAZ,KACA,EAAyBV,mBAAS,MAAlC,mBAAOW,EAAP,KAAcC,EAAd,KAGA,EAA6BZ,mBAAS,QAAtC,mBAAOa,EAAP,KAAgBC,GAAhB,KACA,GAAwBC,IAAMf,UAAS,GAAvC,qBAAOgB,GAAP,MAAaC,GAAb,MAMMC,GAAc,SAACC,EAAOC,GACX,cAAXA,GAIJH,IAAQ,IAyCV,OAXFI,qBAAU,WAETC,aAAaC,QAAQ,OAAOC,KAAKC,UAAU,CAAC,CAAEhB,KAAK,OAClDJ,KAAK,OACLM,OAAO,YACPJ,MAAM,qBACNM,SAAS,aACR,IAME,qCAEC,eAACa,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAW7B,EAAQf,KAA7C,UACE,eAAC6C,EAAA,EAAD,CAAM1B,MAAOA,EACb2B,SA7Ce,SAACX,EAAOY,GAC3B3B,EAAS2B,GACTC,QAAQC,IAAIF,IA4CRzC,eAAe,UACfC,UAAU,UACV,aAAW,sBAJX,UAKE,cAACF,EAAA,EAAD,CAAK6C,MAAO,EAAGC,MAAM,SACrB,cAAC9C,EAAA,EAAD,CAAK8C,MAAM,QAAQD,MAAO,EAAGE,QA3BpB,SAACC,GAClB,IAAMC,EAAKhB,aAAaiB,QAAQ,QAC1BC,EAAQhB,KAAKiB,MAAMH,GACvBpC,EAAOsC,SA0BH,cAAC3C,EAAD,QAIGM,GAGC,qBAAKyB,UAAU,OAAf,SACF,sBAAKA,UAAU,UAAf,UACE,mBAAGA,UAAU,iBAAb,0BAGA,mBAAGA,UAAU,OAAb,qKAMA,sBAAKA,UAAU,UAAf,UACA,uBAAQc,aAAa,MAAMC,SAnElB,SAACN,GAGlB,GAFAA,EAAEO,iBAECvC,GAAOI,GAAOE,GAASJ,GAAQM,EAAS,CACvC,IAAIgC,EAAI,CACNpC,KAAKA,EACLJ,KAAKA,EACLM,OAAOA,EACPJ,MAAMA,EACNM,SAASA,GAELyB,EAAKhB,aAAaiB,QAAQ,QAC5BO,EAAItB,KAAKiB,MAAMH,GACpBQ,EAAIC,KAAKF,GACTvB,aAAaC,QAAQ,OAAOC,KAAKC,UAAUqB,IAC3C7B,IAAQ,KAoDH,UAKA,eAAC+B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAzB,UACE,cAACF,EAAA,EAAD,CAAOG,MAAI,EAACC,GAAI,EAAGxB,UAAW7B,EAAQsD,UAAtC,SACE,gCACA,cAACC,EAAA,EAAD,CAAY1E,QAAQ,WAApB,wBAIO,cAAC2E,EAAA,EAAD,CAEAC,WAAS,EACX5E,QAAQ,WAER6E,UAAQ,EACPC,KAAK,QACL5B,SAAU,SAAAO,GAAC,OAAI/B,EAAQ+B,EAAEsB,OAAOxD,QAChCyB,UAAW7B,EAAQ6D,QAEtB,cAACN,EAAA,EAAD,CAAY1E,QAAQ,WAApB,0BAKnB,cAAC,IAAD,CACEiF,QAAS,KAER/B,SAAU,SAAC3B,EAAM0D,EAAQxB,EAAGyB,GAG7B,IAAMC,EAAI,IAAD,OAAKF,EAAQG,SAAb,YAAyB7D,GAClCS,EAAWmD,IAGXE,eAAgB,CACdC,OAAQ,sBACRC,aAAa,OAGfC,WAAY,CACVC,WAAY,QACZH,OAAQ,sBACRI,MAAM,QAERC,cAAc,WACdC,YAAa,CACXtF,gBAAgB,QAChBgF,OAAO,eAUK,cAAClB,EAAA,EAAD,CAAOG,MAAI,EAACC,GAAI,EAAGxB,UAAW7B,EAAQsD,UAAtC,SACA,gCACA,cAACC,EAAA,EAAD,CAAY1E,QAAQ,WAApB,yBAGE,cAAC2E,EAAA,EAAD,CAENC,WAAS,EACR5E,QAAQ,WAER6E,UAAQ,EACRC,KAAK,QACL5B,SAAU,SAAAO,GAAC,OAAI7B,EAAS6B,EAAEsB,OAAOxD,QACjCyB,UAAW7B,EAAQ6D,QAEnB,cAACN,EAAA,EAAD,CAAY1E,QAAQ,WAApB,2BAGC,eAAC6F,EAAA,EAAD,CAAYC,KAAG,EAACvE,MAAOU,EAAUiB,SAAU,SAACO,GAAD,OAAKvB,GAAYuB,EAAEsB,OAAOxD,QAArE,UACA,cAACwE,EAAA,EAAD,CAAmBxE,MAAM,YAAYyE,QAAS,cAACC,EAAA,EAAD,CAAO1F,MAAM,YAAagD,MAAM,cAC9E,cAACwC,EAAA,EAAD,CAAmBxE,MAAM,OAAOyE,QAAS,cAACC,EAAA,EAAD,CAAO1F,MAAM,YAAagD,MAAM,SACzE,cAACwC,EAAA,EAAD,CAAmBxE,MAAM,OAAOyE,QAAS,cAACC,EAAA,EAAD,CAAO1F,MAAM,YAAagD,MAAM,SACzE,cAACwC,EAAA,EAAD,CAAmBxE,MAAM,MAAMyE,QAAS,cAACC,EAAA,EAAD,CAAO1F,MAAM,YAAagD,MAAM,mBAqB1E,cAACa,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAzB,SAGI,cAACF,EAAA,EAAD,CAAOG,MAAI,EAACC,GAAI,EAAGxB,UAAW7B,EAAQsD,UAAtC,SACA,gCACA,cAACC,EAAA,EAAD,CAAY1E,QAAQ,WAApB,kBAGF,cAAC2E,EAAA,EAAD,CAEFC,WAAS,EACR5E,QAAQ,WAER6E,UAAQ,EACRC,KAAK,QACL5B,SAAU,SAAAO,GAAC,OAAI3B,EAAQ2B,EAAEsB,OAAOxD,QAChCyB,UAAW7B,EAAQ6D,eASpB,qBAAKhC,UAAU,eAAf,SACM,8BACE,cAACkD,EAAA,EAAD,CAAQlG,QAAQ,YAAYmG,KAAK,SAAS5F,MAAM,YAAhD,2BASR,qBAAKyC,UAAW7B,EAAQf,KAAxB,SAEN,cAACgG,EAAA,EAAD,CAAUhE,KAAMA,GAAMiE,iBAAkB,IAAMC,QAAShE,GAAvD,SACE,cAAC,EAAD,CAAOgE,QAAShE,GAAaiE,SAAS,UAAtC,qCAgBW,IAARhF,GACE,qCACA,oBAAIiF,MAAO,CAACxF,OAAO,QAAnB,0BACD,cAACyF,EAAA,EAAD,CAAgBC,UAAWC,IAAO3D,UAAW7B,EAAQJ,eAArD,SACA,eAAC6F,EAAA,EAAD,CAAO5D,UAAW7B,EAAQP,MAAO,aAAW,eAA5C,UACE,cAACiG,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAU9D,UAAU,eAApB,UAEE,cAAC+D,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,uBACA,cAACD,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,wBACA,cAACD,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,yBACA,cAACD,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,yBACA,cAACD,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,mBACA,cAACD,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,uBAGJ,cAACC,EAAA,EAAD,UACG5F,EAAI6F,KAAI,SAACpB,EAAIxC,GAAL,OACP,eAACwD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAY/D,UAAU,YAAYgE,MAAM,SAAxC,0BACA,cAACD,EAAA,EAAD,CAAY/D,UAAU,YAAYgE,MAAM,SAAxC,SAAkDlB,EAAIrE,OACtD,cAACsF,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,SAAiDlB,EAAI/D,SACrD,cAACgF,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,SAAiDlB,EAAInE,QACrD,cAACoF,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,SAAiDlB,EAAI7D,WACrD,cAAC8E,EAAA,EAAD,CAAW/D,UAAU,YAAYgE,MAAM,SAAvC,SAAiDlB,EAAIjE,SANxCyB,mB,qBClW3BnD,EAAQgH,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAK,WAEPC,UAAU,CACRD,KAAK,cAeIE,MAXf,WACE,OACE,8BACG,cAACC,EAAA,EAAD,CAAetH,MAAOA,EAAtB,SACK,cAAC,EAAD,SCLGuH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a76aa5f1.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport './Form.css';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles,createTheme,ThemeProvider} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nimport ReactPhoneInput from 'react-phone-input-material-ui';\r\n\r\nimport { Container, \r\n  Grid,\r\n  TextField,\r\n  FormControlLabel,\r\n  Radio, RadioGroup,\r\n  Input,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Button\r\n \r\n\r\n\r\n} from '@material-ui/core';\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: '#ffffff',\r\n    color:'black',\r\n    marginBottom:0\r\n  },\r\n  // main:{\r\n  //   backgroundColor:'#adacaa'\r\n  // },\r\n  Tab:{\r\n    indicatorColor:{\r\n      backgroundColor:'#5b2fad',\r\n    },\r\n    textColor:{\r\n      backgroundColor:'#5b2fad',\r\n    },\r\n  },\r\n  table: {\r\n    maxWidth: 900,\r\n    overflow: 'hidden',\r\n  },\r\n  tableContainer:{\r\n    maxWidth: 900,\r\n    margin:30\r\n  }\r\n}));\r\n\r\nfunction TabPanel(){\r\n\r\n  return (\r\n<div>\r\n\r\n</div>\r\n  );\r\n}\r\n\r\nexport default function Form() {\r\n  const classes = useStyles();\r\n const [Row,SetRow]=useState([]);\r\n  const [value, setValue] = useState(0);\r\n  const [text,Settext]=useState(null);\r\n  const [email,Setemail]=useState(null);\r\n  const [name,Setname]=useState(null);\r\n  const [number,Setnumber]=useState(null);\r\n  \r\n\r\n  const [category,SetCategory]=useState('Good');\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    \r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n    console.log(newValue);\r\n  };\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n\r\n    if(text &&name &&number &&email &&category){\r\n        let obj={\r\n          name:name,\r\n          text:text,\r\n          number:number,\r\n          email:email,\r\n          category:category\r\n        }\r\n        const data=localStorage.getItem('data');\r\n        let arr=JSON.parse(data);\r\n       arr.push(obj);\r\n       localStorage.setItem('data',JSON.stringify(arr));\r\n       setOpen(true);\r\n\r\n    }\r\n  }\r\n  const tableClick=(e)=>{\r\n  const data=localStorage.getItem('data');\r\n    let Rowdata=JSON.parse(data);\r\n    SetRow(Rowdata);\r\n}\r\nuseEffect(() => {\r\n  \r\n localStorage.setItem('data',JSON.stringify([{ name:'jake',\r\n  text:'nice',\r\n  number:'232343243',\r\n  email:'udehfuhe@gmail.com',\r\n  category:'good'}]))\r\n}, [])\r\n\r\n\r\n\r\n  return (\r\n    \r\n     <>\r\n      \r\n      <AppBar position=\"static\" className={classes.root}>\r\n        <Tabs value={value} \r\n        onChange={handleChange}\r\n        indicatorColor=\"primary\"\r\n        textColor=\"primary\"\r\n        aria-label=\"simple tabs example\">\r\n          <Tab index={0} label=\"Form\"/>\r\n          <Tab label=\"Table\" index={1} onClick={tableClick}/>\r\n        </Tabs>\r\n        <TabPanel/>\r\n      </AppBar>\r\n        {\r\n\r\n          !value && (\r\n\r\n\r\n            <div className=\"main\">\r\n          <div className=\"content\" >\r\n            <p className=\"contentHeading\">\r\n            Aromatic Bar\r\n            </p>\r\n            <p className=\"para\">\r\n            We are committed to providing you with the best\r\n            dining experience possible, so we welcome your comments. Please fill\r\n            out this questionnaire. Thank you.\r\n            </p>\r\n            \r\n            <div className=\"formDiv\">\r\n            <form   autoComplete=\"off\" onSubmit={handleSubmit}>\r\n  \r\n  \r\n \r\n\r\n            <Grid container spacing={10}>\r\n              <Grid  item md={6} className={classes.formField}>\r\n                <div>\r\n                <Typography variant=\"overline\">\r\n                  Text Field\r\n                  </Typography>\r\n              \r\n                       <TextField  \r\n          \r\n                       fullWidth\r\n                     variant='outlined'\r\n  \r\n                     required\r\n                      size=\"small\"\r\n                      onChange={e => Settext(e.target.value)}\r\n                      className={classes.field}\r\n                          />\r\n                   <Typography variant=\"overline\">\r\n                  Phone NUmber\r\n                  </Typography>\r\n                  \r\n               \r\n<PhoneInput\r\n  country={'in'}\r\n  \r\n   onChange={(value,country,e, formattedValue)=>{\r\n     \r\n    \r\n  const str=`+${country.dialCode}-${value}`\r\n  Setnumber( str)\r\n  \r\n   }}\r\n  containerStyle={{\r\n    border: \"2px solid lightgrey\",\r\n    borderRadius:'4px',\r\n    \r\n  }}\r\n  inputStyle={{\r\n    background: \"white\",\r\n    border: \"0px solid lightgrey\",\r\n    width:'100%'\r\n  }}\r\n  dropdownClass=\"dropdown\"\r\n  buttonStyle={{\r\n    backgroundColor:'white',\r\n    border:'0px '\r\n    \r\n\r\n  }}\r\n \r\n/>\r\n                  </div>\r\n                \r\n                </Grid>\r\n\r\n                <Grid  item md={6} className={classes.formField}>\r\n                <div>\r\n                <Typography variant=\"overline\">\r\n                  Email Field\r\n                  </Typography>\r\n                  <TextField  \r\n          \r\n            fullWidth\r\n             variant='outlined'\r\n  \r\n             required\r\n             size=\"small\"\r\n             onChange={e => Setemail(e.target.value)}\r\n             className={classes.field}\r\n            />\r\n             <Typography variant=\"overline\">\r\n                  Radio Buttons\r\n                  </Typography>\r\n              <RadioGroup row value={category} onChange={(e)=>SetCategory(e.target.value)} >\r\n              <FormControlLabel  value=\"Excellent\" control={<Radio color=\"primary\"/>} label=\"Excellent\"/>\r\n              <FormControlLabel  value=\"Good\" control={<Radio color=\"primary\"/>} label=\"Good\"/>\r\n              <FormControlLabel  value=\"Fair\" control={<Radio color=\"primary\"/>} label=\"Fair\"/>\r\n              <FormControlLabel  value=\"Bad\" control={<Radio color=\"primary\"/>} label=\"Bad\"/>\r\n              \r\n           </RadioGroup>\r\n                  </div>\r\n                \r\n                </Grid>\r\n                \r\n            </Grid>\r\n           \r\n\r\n\r\n\r\n\r\n\r\n\r\n            {/* second form */}\r\n           \r\n  \r\n  \r\n \r\n\r\n            <Grid container spacing={10}>\r\n              \r\n\r\n                <Grid  item md={6} className={classes.formField}>\r\n                <div>\r\n                <Typography variant=\"overline\">\r\n                  Name\r\n                  </Typography>\r\n              <TextField  \r\n          \r\n            fullWidth\r\n             variant='outlined'\r\n  \r\n             required\r\n             size=\"small\"\r\n             onChange={e => Setname(e.target.value)}\r\n             className={classes.field}\r\n            />\r\n               \r\n                  </div>\r\n                \r\n                </Grid>\r\n                \r\n                  \r\n            </Grid>\r\n            <div className=\"buttonHolder\">\r\n                  <div>\r\n                    <Button variant=\"contained\" type=\"submit\" color=\"secondary\" >\r\n                        Submit\r\n                    </Button>\r\n                  </div>\r\n             \r\n            </div>\r\n            \r\n            \r\n            </form>\r\n            <div className={classes.root}>\r\n     \r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          Submitted!!\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n    </div>\r\n            </div>\r\n            \r\n            </div>\r\n            \r\n            \r\n          </div>\r\n          )\r\n         \r\n        }\r\n        {\r\n           value===1 && (\r\n             <>\r\n             <h2 style={{margin:'20px'}}>All Feedback</h2>\r\n            <TableContainer component={Paper} className={classes.tableContainer} >\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow className=\"tableHeading\">\r\n            \r\n                  <TableCell className=\"dataCells\" align=\"center\">Form Name</TableCell>\r\n                  <TableCell className=\"dataCells\" align=\"center\">Text Field</TableCell>\r\n                  <TableCell className=\"dataCells\" align=\"center\">Phone Field</TableCell>\r\n                  <TableCell className=\"dataCells\" align=\"center\">Email Field</TableCell>\r\n                  <TableCell className=\"dataCells\" align=\"center\">Radio</TableCell>\r\n                  <TableCell className=\"dataCells\" align=\"center\">Name</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {Row.map((row,index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell  className=\"dataCells\" align=\"center\">Aromatic Bar</TableCell>\r\n                    <TableCell  className=\"dataCells\" align=\"center\">{row.text}</TableCell>\r\n                    <TableCell className=\"dataCells\" align=\"center\">{row.number}</TableCell>\r\n                    <TableCell className=\"dataCells\" align=\"center\">{row.email}</TableCell>\r\n                    <TableCell className=\"dataCells\" align=\"center\">{row.category}</TableCell>\r\n                    <TableCell className=\"dataCells\" align=\"center\">{row.name}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          </>\r\n          )\r\n        }\r\n      </>\r\n      \r\n      \r\n    \r\n  );\r\n}\r\n","import Form from \"./components/Form\";\nimport { makeStyles,createTheme,ThemeProvider} from '@material-ui/core/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main:'#5b2fad'\n    },\n    secondary:{\n      main:'#428f48'\n    }\n  },\n});\nfunction App() {\n  return (\n    <div >\n       <ThemeProvider theme={theme}>\n            <Form />\n       </ThemeProvider>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}